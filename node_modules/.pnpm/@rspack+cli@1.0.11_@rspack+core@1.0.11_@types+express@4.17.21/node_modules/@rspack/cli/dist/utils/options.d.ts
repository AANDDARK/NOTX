import type yargs from "yargs";
export declare const commonOptions: (yargs: yargs.Argv<{}>) => yargs.Argv<yargs.Omit<{}, "entry" | "devtool" | "mode" | "watch" | "env" | "output-path" | "config" | "node-env" | "configName"> & yargs.InferredOptionTypes<{
    config: {
        g: boolean;
        type: "string";
        describe: string;
        alias: string;
    };
    entry: {
        type: "array";
        string: true;
        describe: string;
    };
    "output-path": {
        type: "string";
        describe: string;
        alias: string;
    };
    mode: {
        type: "string";
        describe: string;
        alias: string;
    };
    watch: {
        type: "boolean";
        default: boolean;
        describe: string;
        alias: string;
    };
    env: {
        type: "array";
        string: true;
        describe: string;
    };
    "node-env": {
        string: true;
        describe: string;
    };
    devtool: {
        type: "boolean";
        default: boolean;
        describe: string;
        alias: string;
    };
    configName: {
        type: "array";
        string: true;
        describe: string;
    };
}>>;
export declare const previewOptions: (yargs: yargs.Argv<{}>) => yargs.Argv<yargs.Omit<{
    dir: string | undefined;
}, "port" | "host" | "open" | "server" | "publicPath" | "config" | "configName"> & yargs.InferredOptionTypes<{
    publicPath: {
        type: "string";
        describe: string;
    };
    config: {
        g: boolean;
        type: "string";
        describe: string;
        alias: string;
    };
    port: {
        type: "number";
        describe: string;
    };
    host: {
        type: "string";
        describe: string;
    };
    open: {
        type: "boolean";
        describe: string;
    };
    server: {
        type: "string";
        describe: string;
    };
    configName: {
        type: "array";
        string: true;
        describe: string;
    };
}>>;
export declare function normalizeEnv(argv: yargs.Arguments): void;
/**
 * set builtin env from cli - like `WEBPACK_BUNDLE=true`. also for `RSPACK_` prefixed.
 * @param env the `argv.env` object
 * @param envNameSuffix the added env will be `WEBPACK_${envNameSuffix}` and `RSPACK_${envNameSuffix}`
 * @param value
 */
export declare function setBuiltinEnvArg(env: Record<string, any>, envNameSuffix: string, value: any): void;
/**
 * infer `argv.env` as an object for it was transformed from array to object after `normalizeEnv` middleware
 * @returns the reference of `argv.env` object
 */
export declare function ensureEnvObject<T extends Record<string, unknown>>(options: yargs.Arguments): T;

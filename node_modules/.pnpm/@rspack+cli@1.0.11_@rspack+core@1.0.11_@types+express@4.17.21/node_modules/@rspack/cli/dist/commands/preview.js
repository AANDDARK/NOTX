"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewCommand = void 0;
const node_path_1 = __importDefault(require("node:path"));
const core_1 = require("@rspack/core");
const options_1 = require("../utils/options");
const defaultRoot = "dist";
class PreviewCommand {
    async apply(cli) {
        cli.program.command(["preview [dir]", "preview", "p"], "run the rspack server for build output", options_1.previewOptions, async (options) => {
            // config、configName are necessary for loadConfig
            const rspackOptions = {
                config: options.config,
                configName: options.configName,
                argv: {
                    ...options
                }
            };
            const { RspackDevServer } = await import("@rspack/dev-server");
            let config = await cli.loadConfig(rspackOptions);
            config = await getPreviewConfig(config, options);
            if (!Array.isArray(config)) {
                config = [config];
            }
            config = config;
            // find the possible devServer config
            config = config.find(item => item.devServer) || config[0];
            const devServerOptions = config.devServer;
            try {
                const compiler = (0, core_1.rspack)({ entry: {} });
                if (!compiler)
                    return;
                const server = new RspackDevServer(devServerOptions, compiler);
                await server.start();
            }
            catch (error) {
                const logger = cli.getLogger();
                logger.error(error);
                process.exit(2);
            }
        });
    }
}
exports.PreviewCommand = PreviewCommand;
// get the devServerOptions from the config
async function getPreviewConfig(item, options) {
    const internalPreviewConfig = async (item) => {
        // all of the options that a preview static server needs(maybe not all)
        item.devServer = {
            static: {
                directory: options.dir
                    ? node_path_1.default.join(item.context ?? process.cwd(), options.dir)
                    : item.output?.path ??
                        node_path_1.default.join(item.context ?? process.cwd(), defaultRoot),
                publicPath: options.publicPath ?? "/"
            },
            port: options.port ?? 8080,
            proxy: item.devServer?.proxy,
            host: options.host ?? item.devServer?.host,
            open: options.open ?? item.devServer?.open,
            server: options.server ?? item.devServer?.server,
            historyApiFallback: item.devServer?.historyApiFallback
        };
        return item;
    };
    if (Array.isArray(item)) {
        return Promise.all(item.map(internalPreviewConfig));
    }
    return internalPreviewConfig(item);
}

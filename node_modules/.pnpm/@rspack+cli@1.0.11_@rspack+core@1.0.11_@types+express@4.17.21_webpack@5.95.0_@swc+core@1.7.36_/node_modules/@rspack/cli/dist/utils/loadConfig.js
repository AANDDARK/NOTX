"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadRspackConfig = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const interpret_1 = __importDefault(require("interpret"));
const rechoir_1 = __importDefault(require("rechoir"));
const crossImport_1 = __importDefault(require("./crossImport"));
const findConfig_1 = __importDefault(require("./findConfig"));
const isEsmFile_1 = __importDefault(require("./isEsmFile"));
const isTsFile_1 = __importDefault(require("./isTsFile"));
const DEFAULT_CONFIG_NAME = "rspack.config";
const registerLoader = (configPath) => {
    const ext = node_path_1.default.extname(configPath);
    // TODO implement good `.mts` support after https://github.com/gulpjs/rechoir/issues/43
    // For ESM and `.mts` you need to use: 'NODE_OPTIONS="--loader ts-node/esm" rspack build --config ./rspack.config.mts'
    if ((0, isEsmFile_1.default)(configPath) && (0, isTsFile_1.default)(configPath)) {
        return;
    }
    const extensions = Object.fromEntries(Object.entries(interpret_1.default.extensions).filter(([key]) => key === ext));
    if (Object.keys(extensions).length === 0) {
        throw new Error(`config file "${configPath}" is not supported.`);
    }
    try {
        rechoir_1.default.prepare(extensions, configPath);
    }
    catch (error) {
        const failures = error?.failures;
        if (failures) {
            const messages = failures.map(failure => failure.error.message);
            throw new Error(`${messages.join("\n")}`);
        }
        throw error;
    }
};
async function loadRspackConfig(options, cwd = process.cwd()) {
    if (options.config) {
        const configPath = node_path_1.default.resolve(cwd, options.config);
        if (!node_fs_1.default.existsSync(configPath)) {
            throw new Error(`config file "${configPath}" not found.`);
        }
        (0, isTsFile_1.default)(configPath) && registerLoader(configPath);
        return (0, crossImport_1.default)(configPath, cwd);
    }
    const defaultConfig = (0, findConfig_1.default)(node_path_1.default.resolve(cwd, DEFAULT_CONFIG_NAME));
    if (defaultConfig) {
        (0, isTsFile_1.default)(defaultConfig) && registerLoader(defaultConfig);
        return (0, crossImport_1.default)(defaultConfig, cwd);
    }
    return {};
}
exports.loadRspackConfig = loadRspackConfig;
